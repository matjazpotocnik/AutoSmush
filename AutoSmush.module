<?php

require_once /*NoCompile*/__DIR__ . '/ImageOptimizer.php';

/**
 * AutoSmush
 * Optimize images
 *
 * @version 1.1.5
 * @author Roland Toth (tpr)
 * @author Matjaz Potocnik (matjazp)
 * @link https://github.com/matjazpotocnik/AutoSmush
 *
 * ProcessWire 2.x/3.x, Copyright 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE
 * https://processwire.com
 *
 */
class AutoSmush extends FieldtypeImage implements Module, ConfigurableModule {

	/**
	 * Module info
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title'    => 'Auto Smush',
			'class'    => 'AutoSmush',
			'author'   => 'Roland Toth, Matja&#382; Poto&#269;nik',
			'version'  => '1.1.5',
			'summary'  => 'Optimize/compress images automatically on upload, resize and crop, ' .
									  'manually by clicking the button or link for each image or variation, ' .
									  'and in bulk mode for all images sitewide.',
			'href'     => 'https://processwire.com/talk/topic/14818-auto-smush/',
			'requires' => 'ProcessWire>=2.5.5, PHP>=5.4.0',
			'icon'     => 'leaf',
			'singular' => true,
			'autoload' => true
		);
	}

	/**
	 * Module configuraton values
	 *
	 */
	const WEBSERVICE = 'http://api.resmush.it/ws.php?exif=true&img=';
	const WEBSERVICE_NOEXIF = 'http://api.resmush.it/ws.php?img=';
	const API_SIZELIMIT = 5242880; // 5 MB limit
	const API_ALLOWED_EXTENSIONS = 'png, jpg, jpeg, gif';
	const JPG_QUALITY_DEFAULT = '90';
	const CONNECTION_TIMEOUT = 30; // for large images and slow connection 30 sec might not be enough
	const JPG_QUALITY_THRESHOLD = 5; // no optimization if gain is less than 5%, only for jpegoptim, should prevent reoptmizing

	/**
	 * Array of messages reported by this module
	 * @var array
	 */
	private $msgs = array();

	/**
	 * Array of settings for image-optimizer
	 * @var array
	 */
	protected $optimizeSettings = array();

	/**
	 * Array of all optimizers
	 * @var array
	 */
	protected $optimizers = array();

	/**
	 * Array of additional paths to look for optimizers executable
	 * @var array
	 */
	protected $optimizersExtraPaths = array();

	/**
	 * Array of allowed extensions for images
	 * @var array
	 */
	protected $allowedExtensions = array();

	/**
	 * Array of error codes returned by reSmush.it web service
	 * @var array
	 */
	private $apiErrorCodes = array();

	/**
	 * Indicator if image needs to be optimized
	 * @var boolean
	 */
	private $isOptimizeNeeded = false;

	/**
	 * Indicator if image was optimized on upload
	 * @var boolean
	 */
	private $isOptimizedOnUpload = false;

	/**
	 * This module config data
	 * @var array
	 */
	protected $configData = array();

	/**
	 * This module default config data
	 * @var array
	 */
	protected $configDataDefault = array();

	/**
	 * PW FileLog object
	 * @var array
	 */
	private $log;


	/**
	 * Construct and set default configuration
	 *
	 */
	public function __construct() {

		$this->msgs = array(
			'start'            => $this->_('Starting...'),
			'complete'         => $this->_('All done'),
			'error'            => $this->_('ERROR:'),
			'save_first'       => $this->_('Module settings have been modified, please save first'),
			'confirm'          => $this->_('Are you sure to continue?'),
			'canceled'         => $this->_('Canceled'),
			'canceling'        => $this->_('Canceling...'),
			'filelist'         => $this->_('Generating list of images'),
			'filelistnum'      => $this->_('Number of images: '),
			'actions'          => $this->_('Actions'),
			'engine'           => $this->_('Engine'),
			'eng_resmushit'    => $this->_('Use reShmush.it online service'),
			'eng_localtools'   => $this->_('Use optimization tools available on web server'),
			'jpg_quality'      => $this->_('JPG quality'),
			'demo'             => $this->_('Optimization disabled in demo mode!'),
		);

		$this->optimizers = array(
			'jpegtran'  => '',
			'jpegoptim' => '',
			'pngquant'  => '',
			'optipng'   => '',
			'pngcrush'  => '',
			'pngout'    => '',
			'advpng'    => '',
			'gifsicle'  => '',
			'svgo'      => ''
		);

		// currently only jpegoptim is used for jpegs, I modified OptimizerFactory.php
		// pngs are chained in this order: pngquant, optipng, pngcrush, advpng
		$this->optimizeSettings = array(
			'ignore_errors'     => false, // in production could be set to true
			'execute_first'     => true, // true: execute just first optimizer in chain, false: execute all optimizers in chain
			'jpegtran_options'  => array('-optimize', '-progressive', '-copy', 'all'),
			'jpegoptim_options' => array('--preserve', '--all-progressive', '--strip-none', '-T' . self::JPG_QUALITY_THRESHOLD),
			'optipng_options'   => array('-i0', '-o2', '-quiet', '-preserve'),
			'advpng_options'    => array('-z', '-3', '-q'),
			'svgo_options'      => array('--disable=cleanupIDs')
		);

		$this->allowedExtensions = array_map('trim', explode(',', self::API_ALLOWED_EXTENSIONS . ', svg'));

		// http://resmush.it/api
		$this->apiErrorCodes = array(
			'400' => $this->_('no url of image provided'),
			'401' => $this->_('impossible to fetch the image from URL (usually a local URL)'),
			'402' => $this->_('impossible to fetch the image from $_FILES (usually a local URL)'),
			'403' => $this->_('forbidden file format provided, works strictly with jpg, png, gif, tif and bmp files.'),
			'404' => $this->_('request timeout from reSmush.it'),
			'501' => $this->_('internal error, cannot create a local copy'),
			'502' => $this->_('image provided too large (must be below 5MB)'),
			'503' => $this->_('internal error, could not reach remote reSmush.it servers for image optimization'),
			'504' => $this->_('internal error, could not fetch image from remote reSmush.it servers')
		);

		$this->configDataDefault = array(
			'optAutoEngine' => 'resmushit',
			'optAutoAction' => array(),
			'optAutoQuality' => self::JPG_QUALITY_DEFAULT,
			'optApiEngine' => 'resmushit',
			'optApiAction' => array(),
			'optApiQuality' => self::JPG_QUALITY_DEFAULT,
			'optManualEngine' => 'resmushit',
			'optManualAction' => array('optimize_originals', 'optimize_variations'),
			'optManualQuality' => self::JPG_QUALITY_DEFAULT,
			'optBulkEngine' => 'resmushit',
			'optBulkAction' => array(),
			'optBulkQuality' => self::JPG_QUALITY_DEFAULT,
			'optChain' => '',
			'optNoExif' => ''
		);
	}


	/**
	 * Initialize log file
	 *
	 */
	public function init() {
		$cls = strtolower(__CLASS__);

		// pruneBytes returns error in PW prior to 3.0.13 if file does not exist
		if(!file_exists($this->wire('log')->getFilename($cls))) {
			$this->wire('log')->save($cls, 'log file created', array('showUser' => false, 'showURL' => false));
		}

		$this->log = new FileLog($this->wire('log')->getFilename($cls));
		method_exists($this->log, __CLASS__) ? $this->log->pruneBytes(20000) : $this->log->prune(20000);

		$paths = $this->wire('config')->paths;
		$this->optimizersExtraPaths = array(
			realpath($paths->siteModules . __CLASS__ . '/windows_binaries'),
			realpath($paths->root),
			realpath($paths->templates),
			realpath($paths->assets)
		);
	}

	/**
	 * Main entry point
	 * Set hooks and handle ajax requests
	 *
	 */
	public function ready() {

		$this->configData = array_merge($this->configDataDefault, $this->wire('modules')->getModuleConfigData($this));

		$config = $this->wire('config');
		$input = $this->wire('input');
		$page = $this->wire('page');

		$this->checkOptimizers();
		foreach($this->optimizers as $optimizer => $path) $this->optimizeSettings[$optimizer . '_bin'] = $path;
		if($this->configData['optChain'] == 1) $this->optimizeSettings['execute_first'] = false;

		// handle ajax optimization calls
		if($input->get('name') === __CLASS__) {

			// optimize images in bulk mode on button click
			// this method halts execution
			if($input->get('mode') === 'bulk') $this->bulkOptimize();

			// optimize images in manual mode on clicking optimize button/link or on image variations modal
			// this method halts execution
			if($input->get('mode') === 'optimize') $this->onclickOptimize(($input->get('var') == 1)); // &var=1 => process variation

			// add assets
			$this->wire('modules')->get('JqueryMagnific');
			$config->scripts->add($config->urls->siteModules . __CLASS__ . '/' . __CLASS__ . '.js');//?v=' . time());
			$config->styles->add($config->urls->siteModules . __CLASS__ . '/' . __CLASS__ . '.css');//?v=' . time());
		}

		// add optimize button/link in manual mode on page/image edit
		if($page->process == 'ProcessPageEdit' || $page->process == 'ProcessPageEditImageSelect') {
			if(in_array('optimize_originals', $this->configData['optManualAction'])) {
				// add link/button
				//$this->log->save("addhookafter InputfieldImage::renderItem in admin");
				$this->addHookAfter('InputfieldImage::renderItem', $this, 'addOptButton');
			}
			if(in_array('optimize_variations', $this->configData['optManualAction'])) {
				// add button on variations page
				// for new image field introduced after 3.0.17 we could hook after InputfieldImage::renderButtons
				//$this->log->save("addhookafter ProcessPageEditImageSelect::executeVariations in admin");
				$this->addHookAfter('ProcessPageEditImageSelect::executeVariations', $this, 'addOptButtonVariations');
			}
			if(in_array('optimize_originals', $this->configData['optManualAction']) ||
				in_array('optimize_variations', $this->configData['optManualAction'])) {
				$config->scripts->add($config->urls->siteModules . __CLASS__ . '/' . __CLASS__ . 'PageEdit.js');//?v=' . time());
			}
		}

		// disable automatic mode when site is in demo mode
		if($config->demo) return;

		// is this check enough?
		$isAdmin = ($page->template == 'admin');

		// optimize images in auto mode on resize in admin
		if($isAdmin &&
			(in_array('optimize_variations', $this->configData['optAutoAction']) || in_array('optimize_variationsCI3', $this->configData['optAutoAction']))) {
			//$this->log->save("addhookafter ImageSizer::resize and Pageimage::size in admin");
			$this->addHookAfter('ImageSizer::resize', $this, 'checkOptimizeNeeded');
			$this->addHookAfter('Pageimage::size', $this, 'optimizeOnResize');
			if($this->wire('modules')->isInstalled('FieldtypeCroppableImage3') && in_array('optimize_variationsCI3', $this->configData['optAutoAction'])) {
				//$this->log->save("addhookafter ProcessCroppableImage3::executeSave and Pageimage::getCrop in admin");
				$this->addHookAfter('ProcessCroppableImage3::executeSave', $this, 'optimizeOnResizeCI3'); //optimize on save in CI3 modal
				$this->addHookAfter('Pageimage::getCrop', $this, 'optimizeOnResize'); //optimize on CI3 crop generation, should that be on upload/add????
			}
		}

		// optimize images in auto mode on pageimage->size() method in templates
		if(!$isAdmin &&
			in_array('optimize_variations', $this->configData['optApiAction'])) {
			//$this->log->save("addhookafter ImageSizer::resize and Pageimage::size in templates");
			$this->addHookAfter('ImageSizer::resize', $this, 'checkOptimizeNeeded');
			$this->addHookAfter('Pageimage::size', $this, 'optimizeOnResizeAPI');
			/*if($this->wire('modules')->isInstalled('FieldtypeCroppableImage3') && in_array('optimize_variationsCI3', $this->configData['optAutoAction'])) {
				$this->log->save("addhookafter ImageSizer::resize and Pageimage::size in admin");
				$this->addHookAfter('ProcessCroppableImage3::executeSave', $this, 'optimizeOnResizeCI3'); //optimize on save in CI3 modal
				$this->addHookAfter('Pageimage::getCrop', $this, 'optimizeOnResize'); //optimize on CI3 crop generation, should that be on upload/add????
			}*/
		}

		// optimize images in auto mode on upload in admin
		// should I hook only in ProcessPageEdit?
		if($isAdmin && in_array('optimize_originals', $this->configData['optAutoAction'])) {
			//$this->log->save("addhookbefore InputfieldFile::fileAdded in admin");
			$this->addHookBefore('InputfieldFile::fileAdded', $this, 'optimizeOnUpload', array('priority'=>200)); //in admin
			$config->js('AutoSmush', $this->_('Optimizing'));
			// delete backup copy - maybe this should run in all cases?
			if(in_array('backup', $this->configData['optAutoAction'])) {
				$this->addHookAfter('InputfieldFile::processInputDeleteFile', $this, 'deleteBackup');
			}
		}

		// optimize images in auto mode on pageimage->add() method in templates
		if(!$isAdmin && in_array('optimize_originals', $this->configData['optApiAction'])) {
			//$this->log->save("addhookafter Pagefile::install in templates");
			$this->addHookAfter('Pagefile::install', $this, 'optimizeOnAdd', array('priority'=>200)); //in templates
			// delete backup copy - maybe this should run in all cases?
			//if(in_array('backup', $this->configData['optAutoAction'])) {
			//	$this->addHookAfter('InputfieldFile::processInputDeleteFile', $this, 'deleteBackup');
			//}
		}

		// optimize images in auto mode on pageimage->url() method in templates
		if(!$isAdmin && in_array('optimize_auto', $this->configData['optApiAction'])) {
			//$this->log->save("addhookafter Pagefile::url in templates");
			$this->addHookAfter('Pageimage::url', $this, 'optimizeOnUrl', array('priority'=>201));
		}

	}

	/**
	 * Hook after ImageSizer::resize in auto mode
	 * Just set the flag that image is resized and it will be optimized if needed
	 *
	 */
	public function checkOptimizeNeeded(/*$event*/) {
		//$imagesizer = $event->object;
		//$imagesizer->filename
		$this->isOptimizeNeeded = true;
	}

	/**
	 * Hook after Pageimage::size in auto mode
	 * Optimize image on resize/crop
	 *
	 * @param HookEvent $event
	 *
	 */
	public function optimizeOnResize($event) {
		$thumb = $event->return;

		$this->optimize($thumb, false, 'auto');
		$this->isOptimizeNeeded = false;

		$event->return = $thumb;
	}

	/**
	 * Hook after Pageimage::size in API mode
	 * Optimize image on resize/crop
	 *
	 * @param HookEvent $event
	 *
	 */
	public function optimizeOnResizeAPI($event) {
		$thumb = $event->return;

		$this->optimize($thumb, false, 'api');
		$this->isOptimizeNeeded = false;

		$event->return = $thumb;
	}

	/**
	 * Hook after ProcessCroppableImage3::executeSave in auto mode
	 * Optimize image on crop when FieldtypeCroppableImage3 is installed
	 *
	 * @param HookEvent $event
	 *
	 */
	public function optimizeOnResizeCI3($event) {

		// get page-id from post, sanitize, validate page and edit permission
		$id = intval($this->input->post->pages_id);
		$page = wire('pages')->get($id);
		if(!$page->id) throw new WireException('Invalid page');
		$editable = $page instanceof RepeaterPage ? $page->getForPage()->editable() : $page->editable();
		if(!$editable) throw new WirePermissionException('Not Editable');

		// get fieldname from post, sanitize and validate
		$field = wire('sanitizer')->fieldName($this->input->post->field);

		// UGLY WORKAROUND HERE TO GET A FIELDNAME WITH UPPERCASE LETTERS
		foreach($page->fields as $f) {
			if(mb_strtolower($f->name) != $field) continue;
			$fieldName = $f->name;
			break;
		}

		$fieldValue = $page->get($fieldName);
		if(!$fieldValue || !$fieldValue instanceof Pagefiles) throw new WireException('Invalid field');
		$field = $fieldValue;
		unset($fieldValue);

		// get filename from post, sanitize and validate
		$filename = wire('sanitizer')->name($this->input->post->filename);

		// $img is not variation
		$img = $field->get('name=' . $filename);
		if(!$img) throw new WireException('Invalid filename');

		// get suffix from post, sanitize and validate
		$suffix = wire('sanitizer')->name($this->input->post->suffix);
		if(!$suffix || strlen($suffix) == 0) throw new WireException('No suffix');

		// build the file
		$file = basename($img->basename, '.' . $img->ext) . '.-' . strtolower($suffix) . '.' . $img->ext;

		// get the variation
		$myimage = $img->getVariations()->get($file);

		if(!$myimage) throw new WireException('Invalid filename');

		$this->optimize($myimage, false, 'auto');
		$this->isOptimizeNeeded = false;

	}

	/**
	 * Hook before InputfieldFile::fileAdded in auto mode
	 * Optimize image on upload in admin interface
	 *
	 * @param HookEvent $event
	 *
	 */
	public function optimizeOnUpload($event) {
		$img = $event->argumentsByName('pagefile');

		// ensure only images are optimized
		if(!$img instanceof Pageimage) return;

		// resmushit doesn't support svg
		if($img->ext == 'svg' && ($this->optimizers['svgo'] == "" || $this->configData["optAutoEngine"] == 'resmushit')) {
			 $this->wire('config')->js('AutoSmush', '');
			 return;
		}

		// ensure only images with allowed extensions are optimized
		if(!in_array($img->ext, $this->allowedExtensions)) return;

		// make a backup
		if(in_array('backup', $this->configData['optAutoAction'])) {
			//@copy($img->filename, $img->filename . '.autosmush');
			$backup = rtrim($img->filename, $img->ext) . '-autosmush_original.' . $img->ext;
			@copy($img->filename, $backup);
		}

		// optimize
		if($this->optimize($img, true, 'auto') !== false) $this->isOptimizedOnUpload = true;
	}

	/**
	 * Hook after Pageimage::install in auto mode
	 * Optimize image on API $page->add() call
	 *
	 * @param HookEvent $event
	 *
	 */
	public function optimizeOnAdd($event) {
		$img = $event->object;

		// ensure only images are optimized
		if(!$img instanceof Pageimage) return;

		// resmushit doesn't support svg
		if($img->ext == 'svg' && ($this->optimizers['svgo'] == "" || $this->configData['optApiEngine'] == 'resmushit')) return;

		// ensure only images with allowed extensions are optimized
		if(!in_array($img->ext, $this->allowedExtensions)) return;

		// make a backup
		if(in_array('backup', $this->configData['optApiAction'])) {
			//@copy($img->filename, $img->filename . '.autosmush');
			$backup = rtrim($img->filename, $img->ext) . '-autosmush_original.' . $img->ext;
			@copy($img->filename, $backup);
		}

		// optimize
		if($this->optimize($img, true, 'api') !== false) $this->isOptimizedOnUpload = true;
	}

	/**
	 * Hook after InputfieldImage::renderItem in manual mode
	 * Add optimize link/button to the image markup
	 *
	 * @param HookEvent $event
	 *
	 */
	public function addOptButton($event) {
		// $event->object = InputfieldFile
		// $event->object->value = Pagefiles
		// $event->arguments[0] or $event->argumentsByName('pagefile') = Pagefile

		$img = $event->argumentsByName('pagefile');

		// resmushit doesn't support svg, also check if optimizer is present
		if($img->ext == 'svg'
			 && ($this->optimizers['svgo'] == "" || $this->configData["optManualEngine"] == 'resmushit')) return;

		// ensure only images are optimized
		if(!in_array($img->ext, $this->allowedExtensions)) return;

		$id = $img->page->id;
		$url = $this->wire('config')->urls->admin . 'module/edit?name=' . __CLASS__ .
					 "&mode=optimize&id=$id&file=$id,{$img->basename}";
		$optimizing = $this->_('Optimizing');
		$title = $this->_('Optimize image');
		$text = $this->_('Optimize');
		if($this->isOptimizedOnUpload) $text = $this->_('Optimized on upload');

		if(stripos($event->return, 'InputfieldFileName') !== false) {
			// InputfieldFileName class found, used in PW versions up to 3.0.17
			$link = "<a href='$url' data-optimizing='$optimizing' class='InputfieldImageOptimize' title='$title'>$text</a>";
			if(stripos($event->return, '</p>') !== false) { // insert link right before </p>
				$event->return = str_replace('</p>', $link . '</p>', $event->return);
			}
		} else if(stripos($event->return, 'InputfieldImageEdit__buttons') !== false) {
			// InputfieldImageEdit__buttons class found, used in PW versions after 3.0.17
			// there is also InputfieldImage::renderButtons hook that could be used
			$link = "<a href='$url&var=1' title='$title'>$text</a>";
			$adminTheme = $this->wire('user')->admin_theme ? $this->wire('user')->admin_theme : $this->wire('config')->defaultAdminTheme;
			if($adminTheme == 'AdminThemeUikit') {
				$b  = "<button type='button' data-href='$url' data-optimizing='$optimizing' class='InputfieldImageOptimize1 uk-button uk-button-small uk-button-text uk-margin-small-right'>";
			} else {
				$b  = "<button type='button' data-href='$url' data-optimizing='$optimizing' class='InputfieldImageOptimize1 ui-button ui-corner-all ui-state-default'>";
			}
			$b .= "<span class='ui-button-text'><span class='fa fa-leaf'></span><span> $text</span></span></button>";
			if(stripos($event->return, '</small>') !== false) { // insert button right before </small> as the last (third) button, after Crop and Variations buttons
				$event->return = str_replace('</small>', $b . '</small>', $event->return);
			}
		} else {
			$this->log->save('addOptButton: class InputfieldFileName/InputfieldImageedit__buttons not found');
		}

	}

	/**
	 * Hook after ProcessPageEditImageSelect::executeVariations in manual mode
	 * Add optimize button to the variations page
	 *
	 * @param HookEvent $event
	 *
	 */
	public function addOptButtonVariations($event) {

		$opturl = $this->wire('config')->urls->admin . 'module/edit?name=' . __CLASS__ . '&mode=optimize&var=1';
		$b = $this->wire('modules')->get('InputfieldButton');
		$b->attr('id', 'optimizeVariants');
		$b->attr('data-href', $opturl);
		$b->attr('value', $this->_('Optimize Checked'));
		$b->attr('data-optimizing', $this->_('Optimizing'));
		$b->attr('data-check', $this->_('No variation checked!'));
		$b->icon = 'leaf';
		$b->addClass('InputfieldOptimizeVariants');
		$b->attr('style', 'display:none');

		$needle = "<ul class='Inputfields'>";
		// if there's only the default admin theme, $user->admin_theme is not available
    $adminTheme = $this->wire('user')->admin_theme ? $this->wire('user')->admin_theme : $this->wire('config')->defaultAdminTheme;
		//if($adminTheme == 'AdminThemeUikit') $needle = "<ul class='Inputfields uk-grid-collapse' uk-grid>";
		if($adminTheme == 'AdminThemeUikit') $needle = "<ul class='Inputfields uk-grid-collapse uk-grid-match' uk-grid uk-height-match='target: > .Inputfield:not(.InputfieldStateCollapsed) > .InputfieldContent'>";
		if(stripos($event->return, $needle) !== false) {
			$event->return = str_replace($needle, $needle . $b->render(), $event->return);
		}
	}

	/**
	 * Hook after InputfieldFile::processInputDeleteFile deletes original uploaded file
	 *
	 * @param HookEvent $event
	 *
	 */
	public function deleteBackup($event) {
		$img = $event->argumentsByName('pagefile');

		$backup = rtrim($img->filename, $img->ext) . '-autosmush_original.' . $img->ext;
		//@unlink($img->filename . '.autosmush');
		@unlink($backup);
	}

	/**
	 * Hook after Pageimage::url to return url with optimized image
	 * Create a variation image, optimize it and return url to this optimized variation
	 * /site/assets/files/1234/img.jpg -> /site/assets/files/1234/img.-autosmush.jpg
	 *
	 * @param HookEvent $event
	 *
	 */
	public function optimizeOnUrl($event) {
		// DO NOT attempt to dump Pageimage object or access its urls methods as recursion occurs!!!
		$url = $event->return;
		//$this->log->save("optimizeOnAccess, url=$url");

		// replace , with |
		$exts = str_replace(array(', ', ','), '|', self::API_ALLOWED_EXTENSIONS . ', svg');

		//$f = str_replace($this->wire('config')->urls->files, '', $url);
		//$pageid = explode('/', $f)[0]; //sanitize

		// extract page id from url
		//0 => "/site/assets/files/1234/img.jpg"
		//1 => "1234"
		//2 => "img.jpg"
		//3 => "jpg"
		if(! preg_match('~' . $this->wire('config')->urls->files .'(\d+)/([^/]+\.(' . $exts . '))$~i', $url, $match)) {
			$this->log->save("Invalid image url $url");
			return;
		}
		$pid = $match[1];
		$filename = $this->wire('sanitizer')->filename($match[2]);
		if(stripos($filename, '-autosmush.')) return; // bypass if it contains this string, as image is already optimized

		$p = $this->wire('pages')->get($pid);
		if(!$p->id) {
			$this->log->save("Invalid image url $url");
			return;
		}

		$pfm = new PagefilesManager($p);

		// heads up: even you ask for a variation, you get the original
		// https://processwire.com/talk/topic/18230-retrieving-wrong-non-croped-file-with-filesmanager/
		$img = $pfm->getFile($filename); // this is slower: $img = $pfm->getFile($url);
		if(!$img instanceof Pageimage) return;
		// to get a variation:
		// $variation = $img->getVariations()->get($filename);
		// if($variation) $img = $variation;

		// do not attempt to optimize variation
		//if($img->isVariation($varBasename)) return;
		if($this->isVariation($img->basename, $filename)) return; //this is faster

		// resmushit doesn't support svg
		if($img->ext == 'svg' && ($this->optimizers['svgo'] == "" || $this->configData["optApiEngine"] == 'resmushit')) {
			$this->log->save("Unsupported extension svg");
			return;
		}

		// ensure only images with allowed extensions are optimized
		if(!in_array($img->ext, $this->allowedExtensions)) {
			$this->log->save("Unsupported extension " . $img->ext);
			return;
		}

		// construct variation filename eg. C:/inetpub/wwwroot/site/assets/files/1234/img.-autosmush.jpg
		$varFilename = rtrim($img->filename, $img->ext) . '-autosmush.' . $img->ext;

		// construct variation basename eg. img.-autosmush.jpg
		$varBasename = rtrim($img->basename, $img->ext) . '-autosmush.' . $img->ext;

		// if variation doesn't exist, copy source file to variation file and optimize it
		if(!file_exists($varFilename)) {
			if(@copy($img->filename, $varFilename)) {
				$vimg = $img->getVariations()->get($varBasename);
				if($this->optimize($vimg, true, 'api') !== false) $this->isOptimizedOnUpload = true;
			}
		}

		//$optimized = str_replace($match[2], '', $url) . $varBasename;
		$optimized = str_replace($filename, '', $url) . $varBasename;

		//bd($optimized, "optimizeOnAccess, optimized url=");

		// return url with optimized variation image
		$event->return = $optimized;
	}

	/**
	 * Process image optimize via ajax request when optimize link/button is clicked
	 * or in bulk mode
	 *
	 * @param bool $getVariations true when optimizing variation, false if original
	 * @return string|json
	 *
	 */
	public function onclickOptimize($getVariations = false) {

		$err = "<i style='color:red' class='fa fa-times-circle'></i>";
		$input = $this->wire('input');
		$status = array(
			'error'           => null, // various errors
			'error_api'       => null, // erros from reSmush.it
			'percentNew'      => '0', // reduction percentage
			'file'            => '', // image name
			'basedir'         => '', // page id where image is eg. 1234
			'url'             => '#' // full url to the image
		);

		$file = $input->get('file'); // 1234,image.jpg
		$id = (int) $input->get('id'); // could also get id from file var
		$bulk = $input->get('bulk');
		$m = ($bulk == 1) ? 'bulkOptimize: ' : 'onclickOptimize: ';
		// $file = $this->wire('sanitizer')->pageNameUTF8($input->get('file'));

		if($this->wire('config')->demo) {
			$msg = $this->msgs['demo'];
			$this->log->save($m . $msg);
			if($bulk == 1) {
				$status['error'] = $msg;
				header('Content-Type: application/json');
				echo json_encode($status);
			} else {
				echo $getVariations ? $err : $msg;
			}
			exit(0);
		}

		$page = $this->wire('pages')->get($id);

		if(!$id || !$file || !$page->id) {
			$msg = 'Invalid data!';
			$this->log->save($m . $msg);
			if($bulk == 1) {
				$status['error'] = 'invalid data';
				header('Content-Type: application/json');
				echo json_encode($status);
			} else {
				echo $getVariations ? $err : $msg;
			}
			exit(0);
		}

		$status['file'] = $this->wire('config')->urls->files . $id . '/' . explode(',', $file)[1]; // fake image name
		$status['basedir'] = $id; // page id where image is eg. 1234

		// this doesn't work with CroppableImage3
		//$img = wire('modules')->get('ProcessPageEditImageSelect')->getPageImage($getVariations);

		// old version
		/*$myimage = null;
		$page = $this->wire('pages')->get($id);
		$file = explode(',', $file)[1];
		$imgs = $this->wire('modules')->get('ProcessPageEditImageSelect')->getImages($page);

		foreach($imgs as $img) {
			if($img->basename == $file) {
				// original found
				$myimage = $img;
				break;
			}
			$myimage = $img->getVariations()->get($file);
			if($myimage) {
				// variation found
				break;
			}
		}*/

		// new version
		$myimage = $this->getPageImage($page, true);

		if(!$myimage) {
			$file = explode(',', $file)[1];
			$msg = ' not found!';
			$this->log->save($m . $file . $msg);
			if($bulk == 1) {
				$status['error'] = 'image not found';
				header('Content-Type: application/json');
				echo json_encode($status);
			} else {
				echo $getVariations ? $err : $msg;
			}
			exit(0);
		}

		$img = $myimage;

		$src_size = (int) @filesize($img->filename);
		if($src_size == 0) {
			// this shouldn't happen but who knows
			if($bulk == 1) {
				$status['error'] = 'zero file size';
				header('Content-Type: application/json');
				echo json_encode($status);
			} else {
				echo 'Zero file size!';
			}
			exit(0);
		}

		if($bulk == 1) {
			$status = $this->optimize($img, true, 'bulk');
			header('Content-Type: application/json');
			echo json_encode($status);
			exit(0);
		} else {
			$status = $this->optimize($img, true, 'manual');
			if($status['error'] !== null) {
				$msg = $this->_('Not optimized, check log!');
				// errors are already logged by optimize method
				echo $getVariations ? $err : $msg;
				exit(0);
			}
		}

		@clearstatcache(true, $img->filename);
		$dest_size = @filesize($img->filename);

		if($getVariations) {
			echo wireBytesStr($dest_size);
		} else {
			//$percentNew = 100 - (int) ($dest_size / $src_size * 100);
			//printf($this->x_x('Optimized, reduced by %1$d%%'), $percentNew);
			echo $this->_('Optimized, new size:') . ' ' . wireBytesStr($dest_size);
		}

		exit(0);
	}

	/**
	 * Create a list of images to be optimized and echo them in JSON format.
	 * Called from this module settings in bulk mode, on button click
	 *
	 */
	public function bulkOptimize() {

		// check if engine is selected
		if(!isset($this->configData['optBulkEngine'])) {
			$this->log->save('No engine selected (bulk).');
			$status = array(
				'error' => 'No engine selected.',
				'numImages' => 0
			);
			header('Content-Type: application/json');
			echo json_encode($status);
			exit(0);
		}

		$processOriginals  = in_array('optimize_originals', $this->configData['optBulkAction']);
		$processVariations = in_array('optimize_variations', $this->configData['optBulkAction']);

		// get all fields of type FieldtypeImage or FieldtypeCroppableImage3
		$selector = 'type=FieldtypeImage';
		if(wire('modules')->isInstalled('FieldtypeCroppableImage3')) $selector .= '|FieldtypeCroppableImage3';
		$imageFields = wire('fields')->find($selector);

		// get total number of pages with images
		$numPagesWithImages = 0;
		foreach ($imageFields as $f) $numPagesWithImages += wire('pages')->count("$f>0, include=all");

		$allImages = array();
		$limit = 1;
		$start = abs((int) wire('input')->get('start'));
		if($start >= $numPagesWithImages) $start = $numPagesWithImages;

		// get all images from pages that have image fields
		foreach ($imageFields as $f) {
			foreach (wire('pages')->find("$f>0, include=all, start=$start, limit=$limit") as $p) {
				$images = $p->getUnformatted($f->name);
				$id = $p->id;
				$filesArray = false;

				foreach ($images as $i) {
					if($processOriginals) $allImages[] = "$id,{$i->basename}";

					if($processVariations) {

						// create array of files in pagefiles folder eg. /site/assest/files/1234/
						if($filesArray === false) {
							$filesArray = array_diff(@scandir($i->pagefiles->path), array('.', '..', $i->basename)); // array_diff removes ., .. and self
						}

						// iterate over array of files and check if file is variation of current image
						foreach($filesArray as $file) {
							//TODO: exclude file.-autosmush.jpg variations?
							if($this->isVariation($i->basename, $file)) $allImages[] = "$id,$file";
						}
					}
				}
			}
		}

		$totalImages = $this->count($allImages);
		$a = array();
		if($start < $numPagesWithImages) {
			$a["counter"] =	sprintf($this->_('Processing page %1$d out of %2$d - {%3$d}%% complete'), // {} is placeholder, must be present
											$start+1, $numPagesWithImages, (int) ($start / $numPagesWithImages * 100));
		} else {
			$a["counter"] =	sprintf($this->_('All done - {100}%% complete'));
		}
		$a["numBatches"] = $numPagesWithImages;
		$a["numImages"] = $totalImages;
		$a["images"] = $allImages;
		header('Content-Type: application/json');
		echo json_encode($a);
		exit(0);

	}


	/**
	 * Optimize image
	 *
	 * @param Pageimage $img Pageimage object
	 * @param boolean $force true, when you want to force optimize the image
	 * @param string $mode 'auto', 'api', 'manual' or 'bulk'
	 * @return array
	 *
	 */
	public function optimize($img, $force = false, $mode = 'auto') {
		// note: optimized file overwrites original!
		// todo: test with $config->pagefileExtendedPaths = true
		// todo: clean up this method, shorten it,
		//       make optimizers as separate methods that takes just filename, no need for pageimage object

		$demo = $this->wire('config')->demo;

		$status = array(
			'error'           => null, // various errors
			'error_api'       => null, // errors from reSmush.it
			'percentNew'      => '0', // reduction percentage
			'file'            => $img->basename, // image name
			'basedir'         => basename(dirname($img->filename)), // page id where image is eg. 1234
			//'url'             => $img->httpUrl // full url to the image - commented because of hook after Pageimage::url
			'url'             => ''
		);

		// force is only used in optimizeOnUpload
		if(!$force && !$this->isOptimizeNeeded) return false; // todo: return array?

		if(!in_array($img->ext, $this->allowedExtensions)) {
			$error = "($mode): Error optimizing " . $img->filename . ": unsupported extension";
			$this->log->save($error);
			$status['error'] = 'unsupported extension';
			return $status;
		}

		$percentNew = 0;
		$opt = $src_size = $dest_size = '';//$q = '';
		$mode1 = ucfirst(strtolower($mode)); // must match config settings: Auto, Api, Manual, Bulk
		$q = $this->configData["opt{$mode1}Quality"];

		array_push($this->optimizeSettings['jpegoptim_options'], '-m' . $q);
		$this->optimizeSettings['jpegoptim_options'] = array_unique($this->optimizeSettings['jpegoptim_options']);

		if($this->configData["opt{$mode1}Engine"] == 'resmushit') {
			// use resmush.it web service
			$opt = "reSmush.it ($mode): ";

			if($img->filesize >= self::API_SIZELIMIT) {
				$error = 'Error optimizing ' . $img->filename . ', file larger then ' . self::API_SIZELIMIT . ' bytes';
				$this->log->save($opt . $error);
				$status['error'] = 'file to large';
				return $status;
			}

			// upload image using curl
			/*
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, self::WEBSERVICE . '&qlty=' . $q);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 3);
			curl_setopt($ch, CURLOPT_TIMEOUT, self::CONNECTION_TIMEOUT);
			curl_setopt($ch, CURLOPT_POST, true);
			if(version_compare(PHP_VERSION, '5.5') >= 0) {
					$postfields = array ('files' => new CURLFile($img->filename, 'image/' . $img->ext, $img->basename));
					curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true);
			} else {
					$postfields = array ('files' => '@'.$img->filename);
			}
			curl_setopt($ch, CURLOPT_POSTFIELDS, $postfields);
			$data = curl_exec($ch);
			if($data === false || curl_errno($ch)) {
				$error = 'Error optimizing ' . $img->filename . ': cURL error: ' . curl_error($ch);
				$this->log->save($error);
				$status['error'] = curl_error($ch);
				return $status;
			}
			curl_close($ch);
			*/

			// upload image using WireHttp class
			$http = new WireHttp();
			$http->setTimeout(self::CONNECTION_TIMEOUT); // important!!! default is 4.5 sec and that is to low
			$eol = "\r\n";
			$content = '';
			$boundary = strtolower(md5(time()));
			$content .= '--' . $boundary . $eol;
			$content .= 'Content-Disposition: form-data; name="files"; filename="' . $img->basename . '"' . $eol;
			$content .= 'Content-Type: image/' . $img->ext . $eol . $eol; // two eol's!!!!!
			$content .= file_get_contents($img->filename) . $eol;
			$content .= '--' . $boundary . '--' . $eol;
			$http->setHeader('Content-Type', 'multipart/form-data; boundary=' . $boundary);
			if($this->configData["optNoExif"] == 1) {
				$data = $http->post(self::WEBSERVICE_NOEXIF . '&qlty=' . $q, $content);
			} else {
				$data = $http->post(self::WEBSERVICE . '&qlty=' . $q, $content);
			}

			if(is_bool($data)) {
				$error = 'Error optimizing ' . $img->filename . ', ';
				$error1 = $data === true ? 'request timeout' : $http->getHttpCode(true);
				$this->log->save($opt . $error . $error1 . ' (possible request timeout)');
				$status['error'] = $error1;
				return $status;
			}

			$response = json_decode($data);

			if($response === null) {
				$error = 'Error optimizing ' . $img->filename . ', returned data is empty';
				$this->log->save($opt . $error);
				$status['error'] = 'returned data is empty';
				return $status;
			}

			if(isset($response->error)) {
				$error = isset($this->apiErrorCodes[$response->error]) ? $this->apiErrorCodes[$response->error] : $response->error;
				$this->log->save($opt . 'Error optimizing ' . $img->filename . ', ' . $error);
				$status['error'] = $error;
				$status['error_api'] = $error;
				return $status;
			}

			$dest_size = $response->dest_size;
			$src_size = $response->src_size;

			// write to file only if optimized image is smaller
			if($dest_size < (int) ((100 - self::JPG_QUALITY_THRESHOLD) / 100 * $src_size)) {

				$http = new WireHttp();
				$http->setTimeout(self::CONNECTION_TIMEOUT);
				try {
					if(!$demo) $http->download($response->dest, $img->filename);//, array('useMethod' => 'fopen'));
					//$percentNew = 100 - (int) ($response->dest_size / $response->src_size * 100);
					$percentNew = (int) $response->percent;
				} catch(Exception $e) {
					$error = 'Error retreiving ' . $response->dest . ', ' . $e->getMessage();
					$this->log->save($opt . $error);
					$status['error'] = $e->getMessage();
					return $status;
				}
			}
		}

		else if($this->configData["opt{$mode1}Engine"] == 'localtools') {
			// use local (server) tools
			$opt = "ServerTools ($mode): ";

			$src_size = filesize($img->filename);
			$factory = new \ImageOptimizer\OptimizerFactory($this->optimizeSettings);
			$optimizer = $factory->get();
			//$optimizer = $factory->get('jpegoptim');

			try {
				// optimizer will throw an exception if none of the optimizers in chain are found
				if(!$demo) $optimizer->optimize($img->filename);  // optimized file overwrites original!
			} catch (Exception $e) {
				$error = $e->getMessage();
				$this->log->save($opt . 'Error optimizing ' . $img->filename . ', ' . $error);
				$status['error'] = $error;
				return $status;
			}

			clearstatcache(true, $img->filename);
			$dest_size = filesize($img->filename);
			$percentNew = 100 - (int) ($dest_size / $src_size * 100);

		} else {
			// no engine selected
			$opt = "No engine selected ($mode). ";
			$src_size = filesize($img->filename);
			$this->log->save($opt . $img->filename . ', source ' . $src_size . ' bytes');
			return $opt; // todo: return false, array, json?
		}

		// image is optimized
		$this->log->save($opt . $img->filename . ', source ' . $src_size . ' bytes, destination ' . $dest_size . ' bytes, reduction ' . $percentNew . '%');
		$status['percentNew'] = $percentNew . "";
		return $status;

	}

	/**
	 * Module fields
	 *
	 * @param array $data config data
	 * @return InputfieldWrapper
	 *
	 */
	public function getModuleConfigInputfields(array $data) {

		$fields = new InputfieldWrapper();
		$modules = $this->wire('modules');
		$config = $this->wire('config');
		$data = array_merge($this->configDataDefault, $data);

		if($config->demo) $this->error($this->msgs['demo']);

		// automatic mode in admin (backend)
		$fieldset              = $modules->get('InputfieldFieldset');
		$fieldset->label       = $this->_('Automatic Mode in Admin (backend)');
		$fieldset->description = $this->_('Automatically optimize images on upload (originals) or on resize/crop (variations).');
		$fields->add($fieldset);

		$field                = $modules->get('InputfieldRadios');
		$field->name          = 'optAutoEngine';
		$field->label         = $this->msgs['engine'];
		$field->columnWidth   = 40;
		$field->addOption('resmushit',  $this->msgs['eng_resmushit']);
		$field->addOption('localtools', $this->msgs['eng_localtools']);
		$field->value         = $data['optAutoEngine'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldCheckboxes');
		$field->name          = 'optAutoAction';
		$field->label         = $this->msgs['actions'];
		$field->columnWidth   = 40;
		$field->addOption('optimize_originals', $this->_('Optimize on upload'));
		$field->addOption('backup', $this->_('Backup original'));
		$field->addOption('optimize_variations', $this->_('Optimize on resize/crop'));
		if($modules->isInstalled('FieldtypeCroppableImage3')) $field->addOption('optimize_variationsCI3', $this->_('Optimize on resize/crop for CI3'));
		$field->value         = $data['optAutoAction'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldInteger');
		$field->name          = 'optAutoQuality';
		$field->label         = $this->msgs['jpg_quality'];
		$field->columnWidth   = 20;
		$field->attr('min', '1');
		$field->attr('max', '100');
		$field->value         = $data['optAutoQuality'];
		$fieldset->add($field);


		// automatic mode in templates (frontend)
		$fieldset              = $modules->get('InputfieldFieldset');
		$fieldset->label       = $this->_('Automatic Mode in Templates (frontend API)');
		$fieldset->description = $this->_('Automatically optimize images on API calls (url, add, size).');
		$fields->add($fieldset);

		$field                = $modules->get('InputfieldRadios');
		$field->name          = 'optApiEngine';
		$field->label         = $this->msgs['engine'];
		$field->columnWidth   = 40;
		$field->addOption('resmushit',  $this->msgs['eng_resmushit']);
		$field->addOption('localtools', $this->msgs['eng_localtools']);
		$field->value         = $data['optApiEngine'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldCheckboxes');
		$field->name          = 'optApiAction';
		$field->label         = $this->msgs['actions'];
		$field->columnWidth   = 40;
		$field->addOption('optimize_auto', $this->_('Optimize on Pageimage->url() [EXPERIMENTAL]'));
		$field->addOption('optimize_originals', $this->_('Optimize on Pageimage->add()'));
		//$field->addOption('backup', $this->_('Backup original'));
		$field->addOption('optimize_variations', $this->_('Optimize on Pageimage->size()/width()/height()/crop()'));
		//if($modules->isInstalled('FieldtypeCroppableImage3')) $field->addOption('optimize_variationsCI3', $this->_('Optimize on resize/crop for CI3'));
		//$field->addOption('optimize_api', $this->_('Optimize on API resize/add'));
		$field->value         = $data['optApiAction'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldInteger');
		$field->name          = 'optApiQuality';
		$field->label         = $this->msgs['jpg_quality'];
		$field->columnWidth   = 20;
		$field->attr('min', '1');
		$field->attr('max', '100');
		$field->value         = $data['optApiQuality'];
		$fieldset->add($field);


		// manual mode
		$fieldset = $modules->get('InputfieldFieldset');
		$fieldset->label = $this->_('Manual Mode');
		$fieldset->description = $this->_('Add Optimize button/link to page and/or variations modal.');
		$fields->add($fieldset);

		$field                = $modules->get('InputfieldRadios');
		$field->name          = 'optManualEngine';
		$field->label         = $this->msgs['engine'];
		$field->columnWidth   = 40;
		$field->addOption('resmushit',  $this->msgs['eng_resmushit']);
		$field->addOption('localtools', $this->msgs['eng_localtools']);
		$field->value         = $data['optManualEngine'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldCheckboxes');
		$field->name          = 'optManualAction';
		$field->label         = $this->msgs['actions'];
		$field->columnWidth   = 40;
		$field->addOption('optimize_originals',  $this->_('Add optimize button/link to page edit'));
		$field->addOption('optimize_variations', $this->_('Add optimize button to variations modal'));
		$field->value         = $data['optManualAction'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldInteger');
		$field->name          = 'optManualQuality';
		$field->label         = $this->msgs['jpg_quality'];
		$field->columnWidth   = 20;
		$field->attr('min', '1');
		$field->attr('max', '100');
		$field->value         = $data['optManualQuality'];
		$fieldset->add($field);


		// bulk mode
		$fieldset              = $modules->get('InputfieldFieldset');
		$fieldset->name        = 'bulkoptimize_fieldset';
		$fieldset->label       = $this->_('Bulk Mode');
		$fieldset->description = $this->_('Optimize ALL images on button click.');
		$fields->add($fieldset);

		$field                = $modules->get('InputfieldRadios');
		$field->attr('id+name', 'optBulkEngine');
		$field->label         = $this->msgs['engine'];
		$field->columnWidth   = 40;
		$field->addOption('resmushit',  $this->msgs['eng_resmushit']);
		$field->addOption('localtools', $this->msgs['eng_localtools']);
		$field->value         = $data['optBulkEngine'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldCheckboxes');
		$field->name          = 'optBulkAction';
		$field->id            = 'optBulkAction';
		$field->label         = $this->msgs['actions'];
		$field->columnWidth   = 40;
		$field->addOption('optimize_originals',  $this->_('Optimize originals'));
		$field->addOption('optimize_variations', $this->_('Optimize variations'));
		$field->value         = $data['optBulkAction'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldInteger');
		$field->name          = 'optBulkQuality';
		$field->id            = 'optBulkQuality';
		$field->label         = $this->msgs['jpg_quality'];
		$field->columnWidth   = 20;
		$field->attr('min', '1');
		$field->attr('max', '100');
		$field->value         = $data['optBulkQuality'];
		$fieldset->add($field);

		$field                = $modules->get('InputfieldMarkup');
		$field->id            = 'bulkoptimize';
		$field->label         = $this->_('Bulk optimize');
		$field->icon          = 'coffee';
		$field->description   = $this->_('Click the button below to optimize all images sitewide.');
		//$field->value         = '<p class="description" style="margin-bottom:0;margin-top:-1em"><strong>' .
		$field->value         = '<p class="description"><strong>' .
														$this->_('WARNING: Using web server optimization tools is CPU intensive process. ') .
														$this->_('Running bulk optimize on large amount of images may take a while to finish.') .
														'</strong></p>';
		if($config->demo) {
			$field->value       .= '<span class="NoticeError">&nbsp;' . $this->msgs['demo'] . '&nbsp;</span>';
		}
		//} else {
			$field_button         = $modules->get('InputfieldButton');
			$field_button->attr('id+name', 'optimize_all');
			$field_button->attr('data-url', 'edit?name=' . __CLASS__ . '&mode=bulk');
			$field_button->attr('data-optimizeurl', 'edit?name=' . wire('input')->get('name') . '&mode=optimize&bulk=1');
			$field_button->attr('data-start-msg', $this->getMessage('start'));
			$field_button->attr('data-complete-msg', $this->getMessage('complete'));
			$field_button->attr('data-error-msg', $this->getMessage('error'));
			$field_button->attr('data-confirm-msg', $this->getMessage('confirm'));
			$field_button->attr('data-save-first-msg', $this->getMessage('save_first'));
			$field_button->attr('data-filelist-msg', $this->getMessage('filelist'));
			$field_button->attr('data-filelistnum-msg', $this->getMessage('filelistnum'));
			$field_button->value  = $this->_('Start bulk image optimize');
			$field->add($field_button);

			$field_button         = $modules->get('InputfieldButton');
			$field_button->attr('id+name', 'cancel_all');
			$field_button->attr('data-canceled-msg', $this->getMessage('canceled'));
			$field_button->attr('data-canceling-msg', $this->getMessage('canceling'));
			$field_button->value  = $this->_('Cancel');
			$field->add($field_button);
		//}

			$fieldm               = $modules->get('InputfieldMarkup');
			$fieldm->attr('id', 'progbarwrapper');
			$fieldm->value        = '<progress max="100" value="0" id="progressbar"></progress><span id="percent"></span><p id="result"></p>' .
															'<progress max="100" value="0" id="progressbar1"></progress><span id="percent1"></span>';
			$field->add($fieldm);

		$fieldset->add($field);

		// local tools info
		$fieldset = $modules->get('InputfieldFieldset');
		$fieldset->name = 'localoptimizers_fieldset';
		$fieldset->label = $this->_('Advanced options for web server optimization tools');
		$fieldset->collapsed = Inputfield::collapsedYes;
		$fields->add($fieldset);

		$table = $modules->get('MarkupAdminDataTable');
		$table->setEncodeEntities(false);
		$table->headerRow(array(
			$this->_('Optimizer'),
			$this->_('Path')
		));
		foreach($this->optimizers as $optimizer => $path) {
			if($path === '') $path = $this->_('Not found');
			$table->row(array($optimizer, $path));
		}

		$field = $modules->get('InputfieldMarkup');
		//$field->skipLabel = true;
		$field->label = $this->_('Search path');
		$field->value = '<p>' . $this->findPaths() . '</p>' . $table->render();
		$fieldset->add($field);

		$field = $modules->get('InputfieldCheckbox');
		$field->name = 'optChain';
		$field->label = $this->_('Enable optimizers chaining');
		$field->description = $this->_('If unchecked, only the first available optimizer for specific image type will run (default). If checked, all available optimizers will run one after another.');
		$field->value = $data['optChain'];
		$field->checked = ($field->value == 1) ? 'checked' : '';
		$fieldset->add($field);

		// reSmush.it tools info
		$fieldset = $modules->get('InputfieldFieldset');
		$fieldset->name = 'resmushitoptimizers_fieldset';
		$fieldset->label = $this->_('Advanced options for reSmush.it online service');
		$fieldset->collapsed = Inputfield::collapsedYes;
		$fields->add($fieldset);

		$field = $modules->get('InputfieldCheckbox');
		$field->name = 'optNoExif';
		$field->label = $this->_('Remove EXIF data');
		$field->description = $this->_('By default, EXIF data is preserved, check this option to remove it from optimized images.');
		$field->value = $data['optNoExif'];
		$field->checked = ($field->value == 1) ? 'checked' : '';
		$fieldset->add($field);

		return $fields;
	}

	/**
	 * Get message text
	 *
	 * @param string $key
	 * @return string
	 *
	 */
	private function getMessage($key = '') {
		return isset($this->msgs[$key]) ? $this->msgs[$key] : '';
	}


	/**
	 * Checks for existance of optimizer executables
	 *
	 */
	private function checkOptimizers() {
		foreach($this->optimizers as $optimizer => $path) {
			$finder = new Symfony\Component\Process\ExecutableFinder();
			$exec = $finder->find($optimizer, '', $this->optimizersExtraPaths);
			$this->optimizers[$optimizer] = $exec;
		}
	}

	/**
	 * Find paths to serach for optimizer executables
	 *
	 * @return string path
	 *
	 */
	private function findPaths() {
		if(ini_get('open_basedir')) {
			$searchPath = explode(PATH_SEPARATOR, ini_get('open_basedir'));
			$dirs = array();
			foreach ($searchPath as $path) {
				// Silencing against https://bugs.php.net/69240
				if(@is_dir($path)) $dirs[] = $path;
			}
		} else {
			$dirs = array_merge(
				explode(PATH_SEPARATOR, getenv('PATH') ?: getenv('Path')),
				$this->optimizersExtraPaths
			);
			return implode(PATH_SEPARATOR . ' ', array_filter($dirs));
		}
	}


	/**
	 * Given two filenames, check if $variationName is variation of $originalName
	 * This is very simplified version.
	 * isVariation('123.jpg', '123.0x260.jpg'); //true
	 * isVariation('123.jpg', '123.-portrait.jpg'); //true
	 * isVariation('123.jpg', '123.jpg'); //false
	 * isVariation('123.jpg', '456.jpg'); //false
	 *
	 * @param string $originalName
	 * @param string $variationName
	 * @return bool
	 *
	 */
	public function isVariation($originalName, $variationName) {

		// if file is the same as the original, then it's not a variation
		if($originalName === $variationName) return false;

		// if file doesn't start with the original name then it's not a variation
		$test1 = substr($variationName, 0, strpos($variationName, '.'));
		$test2 = substr($originalName, 0, strpos($originalName, '.'));
		if($test1 !== $test2) return false;

		return true;
	}

	/**
	 * Return the Pageimage object from page
	 * This is modified version of the method in ProcessPageEditImageSelect.module to account for
	 * variations made by CroppableImage3
	 *
	 * @param Page $page page that contains images
	 * @param bool $getVariation Returns the variation specified in the URL. Otherwise returns original (default).
	 * @return Pageimage|null
	 *
	 */
	public function getPageimage(Page $page, $getVariation = false) {

		//$images = $this->getImages($this->page);
		$images = $this->getImages($page); //MP
		$file = basename($this->input->get->file);
		$variationFilename = '';

		if(strpos($file, ',') === false) {
			// prepend ID if it's not there, needed for ajax in-editor resize
			$originalFilename = $file;
			$file = $page->id . ',' . $file;
		} else {
			// already has a "123," at beginning
			list($unused, $originalFilename) = explode(',', $file);
		}

		$originalFilename = $this->wire('sanitizer')->filename($originalFilename, false, 1024);

		// if requested file does not match one of our allowed extensions, abort
		//if(!preg_match('/\.(' . $this->extensions . ')$/iD', $file, $matches)) throw new WireException("Unknown image file");
		//$extensions = str_replace(array(', ', ','), '|', self::API_ALLOWED_EXTENSIONS . ', svg');
		$extensions = 'jpg|jpeg|gif|png|svg'; // for performace
		if(!preg_match('/\.(' . $extensions . ')$/iD', $file, $matches)) return null;

		// get the original, non resized version, if present
		// format:            w x h    crop       -suffix
		//if(preg_match('/(\.(\d+)x(\d+)([a-z0-9]*)(-[-_.a-z0-9]+)?)\.' . $matches[1] . '$/', $file, $matches)) {
		if(preg_match('/(\.(\d?)x?(\d?)([a-z0-9]*)(-[-_.a-z0-9]+)?)\.' . $matches[1] . '$/', $file, $matches)) { //MP
			// filename referenced in $_GET['file'] IS a variation
			// Follows format: original.600x400-suffix1-suffix2.ext
			// Follows format: original.-suffix1-suffix2.ext for CroppableImage3 //MP
			//$this->editWidth = (int) $matches[2]; //MP
			//$this->editHeight = (int) $matches[3]; //MP
			$variationFilename = $originalFilename;
			$originalFilename = str_replace($matches[1], '', $originalFilename); // remove dimensions and optional suffix
		} else {
			// filename referenced in $_GET['file'] is NOT a variation
			$getVariation = false;
		}

		// update $file as sanitized version and with original filename only
		$file = "{$page->id},$originalFilename";

		// if requested file is not one that we have, abort
		//if(!array_key_exists($file, $images)) throw new WireException("Invalid image file: $file");
		if(!array_key_exists($file, $images)) return null; //MP

		// return original
		if(!$getVariation) return $images[$file];

		// get variation
		$original = $images[$file];
		$variationPathname = $original->pagefiles->path() . $variationFilename;
		$pageimage = null;
		if(is_file($variationPathname)) $pageimage = $this->wire(new Pageimage($original->pagefiles, $variationPathname));
		//if(!$pageimage) throw new WireException("Unrecognized variation file: $file");
		if(!$pageimage) return null; //MP

		return $pageimage;
	}

	/**
	 * Get all Pageimage objects on page
	 * This is modified version of the method in ProcessPageEditImageSelect.module
	 *
	 * @param Page $page
	 * @param array|WireArray $fields
	 * @param int $level Recursion level (internal use)
	 * @return Pageimage array
	 *
	 */
	public function getImages(Page $page, $fields = array(), $level = 0) {

		$allImages = array();
		if(!$page->id) return $allImages;

		if(empty($fields)) $fields = $page->fields;

		foreach($fields as $field) {

			if($field->type instanceof FieldtypeRepeater) {
			//if(wireInstanceOf($field->type, 'FieldtypeRepeater')) { //only available in PW 3.0.73
				// get images that are possibly in a repeater
				$repeaterValue = $page->get($field->name);
				if($repeaterValue instanceof Page) $repeaterValue = array($repeaterValue); //support for FieldtypeFieldsetPage
				if($repeaterValue) foreach($repeaterValue as $p) {
					$images = $this->getImages($p, $p->fields, $level+1);
					if(!$this->count($images)) continue;
					$allImages = array_merge($allImages, $images);
				}
				continue;
			}

			if(!$field->type instanceof FieldtypeImage) continue;
			$images = $page->getUnformatted($field->name);
			if(!$this->count($images)) continue;

			foreach($images as $image) {
				$key = $page->id . ',' . $image->basename;  // page_id,basename for repeater support
				$allImages[$key] = $image;
			}
		}

		return $allImages;
	}

	/**
	 * Return the count of item(s) present in the given value
	 *
	 * Taken from /wire/core/Functions.php
	 *
	 * @param mixed $value
	 * @return int
	 *
	 */
	private function count($value) {
		if($value === null) return 0;
		if(is_array($value)) return count($value);
		if(is_object($value) && $value instanceof Countable) return count($value);
		return 1;
	}

	/**
	 * Check for disabled exec functions
	 *
	 */
	public function ___install() {
		$disabled = explode(', ', @ini_get('disable_functions'));
		if(in_array('exec', $disabled)) $this->error('exec functions disabled, web server optimization tools will not work.');
	}

	/**
	 * Removes directory /site/assets/autosmush on module uninstall, from previous versions
	 *
	 */
	public function ___uninstall() {
		$logFolder = $this->wire('config')->paths->assets . strtolower(__CLASS__);
		if(is_dir($logFolder)) {
			if(wireRmdir($logFolder, true) === false) throw new WireException("{$logFolder} could not be removed");
		}
	}

}
